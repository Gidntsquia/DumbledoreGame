using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SharpMovement : MonoBehaviour
{
    public Transform groundCheck;
    public Transform player;
    public Rigidbody rb;
    public float acceleration = 30000f;
    public float maxSpeed = 10f;

    public Vector3 jumpPower = new Vector3(0, 200, 0);
    public float groundDistance = 0.1f;
    public LayerMask groundMask;
    bool grounded = true;
    bool jumpFlag = false;



    float timeElapsedSinceJump;
    float xSpeed = 0;
    float ySpeed = 0;
    float zSpeed = 0;
    float fakeXSpeed = 0;
    float lastFakeXSpeed = 0;
    float fasterMaxSpeed;
    float normalMaxSpeed;


    // Start is called before the first frame update
    void Start()
    {
        fasterMaxSpeed = maxSpeed * 1.5f;
        normalMaxSpeed = maxSpeed;
    }

    void jump()
    {
        rb.AddForce(jumpPower);
    }

    // Update is called once per frame
    void Update()
    {
        grounded = Physics.CheckSphere(groundCheck.position, groundDistance, groundMask);
        maxSpeed = normalMaxSpeed;
        if (Input.GetKey(KeyCode.LeftShift) && Input.GetKey("w"))
        {
            rb.AddRelativeForce(Vector3.forward * acceleration * 1.5f * Time.deltaTime);
            maxSpeed = fasterMaxSpeed;
        }
        else if (Input.GetKey("w"))
        {
           rb.AddRelativeForce(Vector3.forward * acceleration * Time.deltaTime);
        }
        if (Input.GetKey("s"))
        {
            rb.AddRelativeForce(Vector3.back * acceleration * Time.deltaTime);
        }
        if (Input.GetKey("a"))
        {
            rb.AddRelativeForce(Vector3.left * acceleration * Time.deltaTime);
        }
        if (Input.GetKey("d"))
        {
            rb.AddRelativeForce(Vector3.right * acceleration * Time.deltaTime);
        }
        if (Input.GetKey(KeyCode.Space) && grounded && !jumpFlag)
        {
            jump();
            jumpFlag = true;
        }
        else
        {
            jumpFlag = false;
        }
        if (grounded)
        {
            ySpeed = 0;
        }
        fakeXSpeed = player.position.x - lastFakeXSpeed;
        lastFakeXSpeed = fakeXSpeed;
        xSpeed = Mathf.Clamp(rb.velocity.x, -(maxSpeed * Time.deltaTime), (maxSpeed * Time.deltaTime));
        zSpeed = Mathf.Clamp(rb.velocity.z, -(maxSpeed * Time.deltaTime), (maxSpeed * Time.deltaTime));
        rb.velocity = new Vector3(xSpeed, rb.velocity.y, zSpeed);

    }
}
    
